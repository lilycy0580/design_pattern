责任链模式：
    多个对象有机会处理请求,避免请求的发送者和接收者之间的耦合关系,将对象连成一条链,并沿着这条链传递该请求,直到有对象处理为止
    核心是"链"

    抽象处理者：
        定义请求的处理方法,唯一对外开放的方法  public final
        定义链的编排方法,设置下一个处理者
        定义抽象方法,由具体的请求者来实现(定义自己的处理级别+具体处理任务)
    具体处理者：
        实现两个抽象方法
    实际业务类：
        Level：定义请求和处理级别
        Request：封装请求
        Response：封装链中返回结果
    封装类：
        对链进行组装并传递请求,返回结果

优点：
    将请求与处理分开,请求者不需要知道谁处理的,处理者不需要知道请求的全貌,两者解耦,提高系统灵活度

缺点：
    性能问题：每次请求都是从链头遍历到链尾,链较长时需考虑性能问题
    调试麻烦

注意事项：
    链的节点需要控制,避免出现超长链

责任链+模板方法